/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.InventoryManager;

import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Order.OrderItem;
import Business.Product.Product;
import Business.Product.ProductDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabRequestEquipment;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import utility.Constants;

/**
 *
 * @author Ashish
 */
public class RequestFundsForEquipmentJpanel extends javax.swing.JPanel {

    LabRequestEquipment request;
    JPanel userProcessContainer;
    Enterprise enterprise;
    UserAccount userAccount;
    ProductDirectory pd;
    public RequestFundsForEquipmentJpanel(JPanel userProcessContainer,UserAccount userAccount, LabRequestEquipment request,Enterprise enterprise,ProductDirectory pd) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.request=request;
        this.enterprise=enterprise;
        this.userAccount=userAccount;
        this.pd=pd;
        lblTotal.setText(String.valueOf(request.getOrderPrice()));
        populateOrderTable();
        populateProducts();
    }
    public void populateProducts()
    {
        DefaultTableModel model = (DefaultTableModel) prodTable.getModel();
        SimpleDateFormat dtFormat =  new SimpleDateFormat ("MM/dd/yyyy");
        
        model.setRowCount(0);
        for (Product p : pd.getProductList())
        {
            Object[] row = new Object[3];
            row[0] = p;
            row[1] = p.getProductQuantity();
            row[2] = p.getProductPrice();
            model.addRow(row);
            
        }                
    }    
    public void populateOrderTable()
    {
        lblTotal.setText(String.valueOf(request.getOrderPrice()));
        SimpleDateFormat dtFormat =  new SimpleDateFormat ("MM/dd/yyyy");
        lblOrder.setText(String.valueOf(request.getOrder().getOrderNum()));
        lblResolved.setText(request.getResolveDate()==null?"--":dtFormat.format(request.getResolveDate()));
        lblReciever.setText(request.getReceiver()==null?"--":String.valueOf(request.getReceiver()));
        lblSender.setText(request.getSender()==null?"--":String.valueOf(request.getSender()));
        lblReqDate.setText(request.getRequestDate()==null?"--":dtFormat.format(request.getRequestDate()));
        lblRem.setText(request.getMessage()==null?"--":request.getMessage());
        if(request.getStatus() == Constants.Status.Processing)
        {
            txtareply.setEnabled(true);
        }
        else{txtareply.setEnabled(false);}
        DefaultTableModel model = (DefaultTableModel) orderTable.getModel();   
        model.setRowCount(0);
        for (OrderItem oi : request.getOrder().getOrderItemList())
        {
            Object[] row = new Object[4];
            row[0] = oi;
            row[1] = oi.getQuantity();
            row[2] = oi.getQuantity()*oi.getProduct().getProductPrice();
            row[3] = request.getStatus()==null?"--":request.getStatus();
            model.addRow(row);            
        }        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblOrder = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        lblReqDate = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblSender = new javax.swing.JLabel();
        lblReciever = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtareply = new javax.swing.JTextArea();
        btnDecline = new javax.swing.JButton();
        btnForward = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        lblResolved = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblRem = new javax.swing.JLabel();
        btnComplete = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        prodTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(44, 62, 80));

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        jLabel1.setText("Process Request");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("Order No.:");

        lblOrder.setText("<< Order No >>");

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product Name", "Quantity", "Price", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderTable);

        jLabel3.setText("Request Date:");

        lblReqDate.setText("<<  Date >>");

        jLabel4.setText("Sender:");

        jLabel5.setText("Reciever:");

        lblSender.setText("<<Sender>>");

        lblReciever.setText("<<Reciever>>");

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel6.setText("Reply:");

        txtareply.setColumns(20);
        txtareply.setRows(5);
        jScrollPane2.setViewportView(txtareply);

        btnDecline.setText("Decline");
        btnDecline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeclineActionPerformed(evt);
            }
        });

        btnForward.setText("Forward Request to Accounts");
        btnForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnForwardActionPerformed(evt);
            }
        });

        jLabel8.setText("Resolved On:");

        lblResolved.setText("<<Resolved On>>");

        jLabel9.setText("Remarks:");

        lblRem.setText("<<Remarks>>");

        btnComplete.setText("Complete");
        btnComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteActionPerformed(evt);
            }
        });

        jLabel10.setText("Total Order Price:");

        lblTotal.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lblTotal.setText("<<Total>>");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel9)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRem)
                                    .addComponent(lblReciever))
                                .addGap(104, 104, 104)
                                .addComponent(jLabel10))
                            .addComponent(lblResolved)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblSender)
                                .addGap(178, 178, 178)
                                .addComponent(lblTotal))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(28, 28, 28)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnBack)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnDecline, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnComplete)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnForward))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(18, 18, 18)
                                    .addComponent(lblOrder)
                                    .addGap(315, 315, 315)
                                    .addComponent(jLabel3)
                                    .addGap(6, 6, 6)
                                    .addComponent(lblReqDate))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(lblOrder)
                    .addComponent(jLabel3)
                    .addComponent(lblReqDate))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblRem)
                        .addComponent(jLabel10))
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTotal)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblSender)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblReciever)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(lblResolved))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnForward)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBack)
                        .addComponent(btnDecline)
                        .addComponent(btnComplete)))
                .addContainerGap(119, Short.MAX_VALUE))
        );

        prodTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Quantity", "Price Per Unit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(prodTable);
        if (prodTable.getColumnModel().getColumnCount() > 0) {
            prodTable.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel7.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel7.setText("Available Equipment");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jLabel7)))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeclineActionPerformed
        if(request.getStatus()==Constants.Status.Processing)
        {
            request.setReply(txtareply.getText());
            request.setResolveDate(new Date());
            request.setStatus(Constants.Status.Declined);
            request.getTrail().updateTrail(Constants.Status.Declined, null,null);
            populateOrderTable();
            txtareply.setEnabled(false);
            int r=JOptionPane.showConfirmDialog(null, "Are you sure you want to save your reply?", "Alert", JOptionPane.YES_NO_OPTION);
            if(r==JOptionPane.YES_OPTION)
            {
                JOptionPane.showMessageDialog(null, "Equipment Request Resolved", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Equipment Request not pending", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeclineActionPerformed

    private void btnForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnForwardActionPerformed
        if(request.getStatus()==Constants.Status.Processing)
        {
            int r=JOptionPane.showConfirmDialog(null, "Are you sure you want to forward this request to accounts?", "Alert", JOptionPane.YES_NO_OPTION);
            if(r==JOptionPane.YES_OPTION)
            {
                boolean flag=true;
                for(OrderItem oi:request.getOrder().getOrderItemList())
                {
                    int requestedQuantity=oi.getQuantity();
                    int availableQuantity=pd.getAvailabileQuantity(oi.getProduct());
                    if(availableQuantity<requestedQuantity)
                    {
                        flag=false;                    
                    }
                }   
                if(flag)
                {
                    int r2=JOptionPane.showConfirmDialog(null, "It seems you already have enough equipments in your inventory to complete this request, it is recommended to complete this request. Do you still want to forward this request to Accounts?", "Alert", JOptionPane.YES_NO_OPTION);
                    if(r2==JOptionPane.YES_OPTION)
                    {
                        request.setReply(txtareply.getText());
                        request.getTrail().addTrail(Constants.Status.Forwarded, userAccount,Constants.TrailLevel.Level2);
                        ((HospitalEnterprise)enterprise).getFundReqQueue().getWorkRequestList().add(request);            
                        request.setSender(userAccount);
                        request.setStatus(Constants.Status.Forwarded);
                        populateOrderTable();
                        JOptionPane.showMessageDialog(null, "Equipment Request Forwarded to Accounts!", "Warning", JOptionPane.WARNING_MESSAGE);                        
                    }
                }
                else
                {                    
                    request.setReply(txtareply.getText());
                    request.getTrail().addTrail(Constants.Status.Forwarded, userAccount,Constants.TrailLevel.Level2);
                    ((HospitalEnterprise)enterprise).getFundReqQueue().getWorkRequestList().add(request);            
                    request.setSender(userAccount);
                    request.setStatus(Constants.Status.Forwarded);
                    populateOrderTable();
                    JOptionPane.showMessageDialog(null, "Equipment Request Forwarded to Accounts!", "Warning", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Equipment Request not pending", "Warning", JOptionPane.WARNING_MESSAGE);   
        }
    }//GEN-LAST:event_btnForwardActionPerformed

    private void btnCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteActionPerformed
        if(request.getStatus()==Constants.Status.Processing||request.getStatus()==Constants.Status.Resolved)
        {
            int r=JOptionPane.showConfirmDialog(null, "Are you sure you want to save your reply?", "Alert", JOptionPane.YES_NO_OPTION);
            if(r==JOptionPane.YES_OPTION)
            {
                
            }
            else{return;}            

            boolean flag=true;
            for(OrderItem oi:request.getOrder().getOrderItemList())
            {
                int requestedQuantity=oi.getQuantity();
                int availableQuantity=pd.getAvailabileQuantity(oi.getProduct());
                if(availableQuantity<requestedQuantity)
                {
                    flag=false;                    
                }
            }
            if(flag)
            {
                request.setReply(txtareply.getText());
                request.setResolveDate(new Date());
                request.setStatus(Constants.Status.Resolved);
                request.getTrail().updateTrail(Constants.Status.Resolved, null,null);
                for(OrderItem oi:request.getOrder().getOrderItemList())
                {
                    int requestedQuantity=oi.getQuantity();
                    int availableQuantity=pd.getAvailabileQuantity(oi.getProduct());
                    pd.setUpdatedQuantity(oi.getProduct(),(availableQuantity-requestedQuantity));
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Request cannot be completed due to insufficient equipments!", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }            
            populateOrderTable();
            populateProducts();
            txtareply.setEnabled(false);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Equipment Request not pending", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnCompleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnComplete;
    private javax.swing.JButton btnDecline;
    private javax.swing.JButton btnForward;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblOrder;
    private javax.swing.JLabel lblReciever;
    private javax.swing.JLabel lblRem;
    private javax.swing.JLabel lblReqDate;
    private javax.swing.JLabel lblResolved;
    private javax.swing.JLabel lblSender;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable prodTable;
    private javax.swing.JTextArea txtareply;
    // End of variables declaration//GEN-END:variables
}
